


<style>

    .img-preview {
        position: relative;
        display: inline-block;
        background-color: rgba(238, 160, 37, 0.53);
        padding: 10px;
        margin: 10px;
        text-align: center;
        align-content: center;
        justify-items: center;
        width: 100%;
    }

        .img-preview .row {
            margin: auto auto;
        }

    .btn-position {
        position: absolute;
        top: 2px;
        right: 2px;
    }

    .img-size {
        max-height: 250px;
        max-width: 250px;
        margin: 10px;
    }
</style>
<FileInput OnPreviewSelected="SelectFilePreview" /><span>Images selected: @selectedFileCount</span>
@if (PreviewFiles.Count > 0)
{

    <div class="img-preview">
        <h4>Image Preview</h4>

        <div class="row">
            @foreach (var file in PreviewFiles)
            {
                <div style="position:relative">
                    <img src="@file.ImageDataUri" class="img-size" />
                    <br />
                    <input type="radio" name="selectFirstImage" checked="@file.Image.IsFirstImage" @onchange="(()=>SetFirstImage(file.Image))" /> <span>Set first image</span>
                    <button @onclick="(()=>DeleteImage(file))" type="button" class="btn btn-position">X</button>
                </div>
            }
        </div>
    </div>
}




@code {
    [Parameter] public EventCallback<List<ImageDto>> OnImageSelected { get; set; }
    private List<UploadFileDto> PreviewFiles = new List<UploadFileDto>();
    private List<ImageDto> Images = new List<ImageDto>();
    private int selectedFileCount = 0;

    private void DeleteImage(UploadFileDto file)
    {
        Images.Remove(file.Image);
        PreviewFiles.Remove(file);
        selectedFileCount = Images.Count;
        StateHasChanged();
    }
    private async Task SelectFilePreview(List<UploadFileDto> previewFiles)
    {
        PreviewFiles = previewFiles;
        Images = previewFiles.Select(x => x.Image).ToList();
        selectedFileCount = Images.Count;
        await OnImageSelected.InvokeAsync(Images);
    }
    private void SetFirstImage(ImageDto image)
    {
        foreach (var img in Images)
        {
            img.IsFirstImage = false;
        }
        var imageToSet = Images.Find(img => img == image);
        imageToSet.IsFirstImage = true;
        StateHasChanged();
    }

}
